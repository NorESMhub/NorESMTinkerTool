{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NorESMTinkerTool","text":"<p>A safe space for tinkering </p> <p>NorESMTinkerTool is a toolchain developed in Python, designed to facilitate the setup, production, and analysis of perturbed parameter ensembles (PPEs) with the Norwegian Earth System Model (NorESM). By making tinkering easy and fun, we can better learn how the model works.</p> <p></p>"},{"location":"#contents","title":"\ud83d\udcda Contents","text":"<ul> <li>Installation</li> <li>Configuration</li> <li>CLI</li> <li>API Usage</li> <li>API Reference</li> <li>Examples</li> <li>FAQ</li> <li>Contributing</li> <li>Changelog</li> </ul>"},{"location":"cli/","title":"Commandline interface (CLI)","text":"<p>This section describes the CLI of NorESMTinkerTool. The CLI contains two main programs:</p> <ul> <li><code>generate-paramfile</code>: Generate parameter file for PPE. </li> <li><code>create-ppe</code>: Create PPE experiment.</li> </ul>"},{"location":"cli/#contents","title":"\ud83d\udcda Contents","text":"<ul> <li>Prerequisites</li> <li>Generate parameter file for PPE</li> <li>Create PPE</li> </ul>"},{"location":"cli/#prerequisites","title":"\ud83d\udce3 Prerequisites","text":"<p>Before the package can be used, the path to the NorESM directory must be set, by specifying the <code>CESMROOT</code> enviromental variable, such that it can find the required CIME libraries.</p> <pre><code>export CESMROOT=/path/to/NorESM\n</code></pre> <p>The CLI also requires that <code>simulation_setup.ini</code> file is created, see Base Configuration of PPE runs for more information.</p> <p>The package then has the following use cases:</p> <ol> <li>Generate parameter file for PPE.</li> <li>Create PPE.</li> </ol> <p>Package usage is detailed further in the following subsections.</p>"},{"location":"cli/#generate-parameter-file-for-ppe","title":"Generate parameter file for PPE","text":"<p>To generate the parameter file for the PPE we use <code>generate-paramfile</code> program.</p> <p>Requirements:</p> <ul> <li>scipy and xarray should be installed, ensure optional 'sampling' is included in installation command <code>pip install -e .[sampling]</code>.</li> <li>Update input files:</li> <li>Update parameter ranges by either adding/editing entries in <code>default_config/default_param_ranges.ini</code> or by feeding an updated custom path to --param-ranges-file (see more information bellow).</li> <li><code>default_config/chem_mech_default.in</code> should be renewed if you are perterbing values from <code>NorESM/components/cam/src/chemistry/pp_trop_mam_oslo/</code>.</li> </ul> <p>To generate the parameter file for the PPE we use Latin Hypercube sampling  to most efficiently span the whole parameter space.  The product of the script is a .nc file that will have one dimension,  'nmb_sim', which contains the number of ensemble members. Each parameter is  stored as a variable in the dataset and is scaled according to its  specified range and sampling method. The ranges as described in the <code>default_config/default_param_ranges.ini</code> file are used to distribute parameter values between its minimum and maximum bounds.</p> <p>There are two options for creating the parameterfile, (1) using the CLI tool:</p>"},{"location":"cli/#command-line-interface-cli","title":"Command Line Interface (CLI)","text":"<p>A description of the fuctionalities of the CLI tool is found by running <code>generate-paramfile --help</code>:</p> <pre><code>usage: generate-paramfile [-h] [--chem-mech-file CHEM_MECH_FILE] [--tinkertool-output-dir TINKERTOOL_OUTPUT_DIR] [--nmb-sim NMB_SIM] [--optimization OPTIMIZATION] [--avoid-scramble]\n                          [--params PARAMS [PARAMS ...]] [--assumed-esm-component ASSUMED_ESM_COMPONENT] [--exclude-default] [--verbose] [--log-file LOG_FILE] [--log-mode LOG_MODE]\n                          param_ranges_inpath param_sample_outpath\n\nGenerates a Latin Hyper Cube parameter file for PPE experiment\n\npositional arguments:\n  param_ranges_inpath   Path to the parameter ranges file in .ini format, default ranges are found in NorESMTinkerTool/default_config/default_param_ranges.ini\n  param_sample_outpath  Path to the output parameter file with .nc extension.\n\noptions:\n  -h, --help            show this help message and exit\n  --chem-mech-file, -cmf CHEM_MECH_FILE\n                        Path to the chemistry mechanism file, default None will use NorESMTinkerTool/default_config/default_chem_mech.in\n  --tinkertool-output-dir, -tod TINKERTOOL_OUTPUT_DIR\n                        Path to the output directory for files produced by TinkerTool, default None will use NorESMTinkerTool/output\n  --nmb-sim, -ns NMB_SIM\n                        Number of ensemble members, default 30\n  --optimization, -opt OPTIMIZATION\n                        Whether to enable optimazation after sampling, valid random-cd or lloyd. Default None.\n  --avoid-scramble, -asc\n                        Overwrite the default scramble of hypercube, i.e. scramble=False to center samples within cells of a multi-dimensional grid. If it is not called, samples are\n                        randomly placed within cells of the grid.\n  --params, -p PARAMS [PARAMS ...]\n                        List of parameters to be sampled, have to be defined in param_ranges_inpath. If unspecified all parameters in param_ranges_inpath will be used\n  --assumed-esm-component, -ac ASSUMED_ESM_COMPONENT\n                        Assume component for parameter. This is used if component is not specified for an entry in the parameter ranges file. Default is 'cam'.\n  --exclude-default, -exd\n                        Whether to exclude the default parameter value in the output file in nmb_sim=0. Using this flag will skip nmb_sim=0. Default is to include default value.\n  --verbose, -v         Increase verbosity level by number of v's (0: WARNING, 1: INFO, 2: INFO_DETAILED, 3: DEBUG)\n  --log-file, -l LOG_FILE\n                        Path to the log file where logs will be written. If None, logs will not be saved to a file.\n  --log-mode, -lm LOG_MODE\n                        Mode for opening the log file. 'w' for write (overwrite), 'a' for append. Default is 'w'.\n\n</code></pre>"},{"location":"configuration/","title":"Base Configuration of PPE runs","text":"<p>Before a PPE ensemble can be created, a base configuration of NorESM must specified.  The arguments to pass in to the CLI and API is generally self explanatory, except for the <code>simulation_setup.ini</code> file which you provide to 'simulation_setup_path' and which have to follow a specific template.</p> <p>This file contain extensive information on the base configuration of each of the PPE simulations. Each ensemble of the PPE will share the same configuration. Current setup uses the following sections; <code>create_case</code>, <code>env_run</code>, <code>env_build</code>, <code>ppe_settings</code>, <code>namelist_control</code> and <code>lifeCycleValues</code>.</p> <p>create_case - This section holds key-value pairs used for creating a new case, i.e. what one does when running <code>./cime/scripts/create_newcase &lt;args&gt;</code>. Required keys are <code>cesm_root</code>, <code>res</code>, <code>compset_name</code>, <code>project</code>, <code>mach</code>, <code>walltime</code> and so a valid section will consist of:</p> <pre><code>[create_case]\ncesm_root   = &lt;absolute path to NorESM&gt;\nres         = &lt;long resolution name or alias&gt;\ncompset     = &lt;long compeset name or alias&gt;\nproject     = &lt;project name&gt;\nmach        = &lt;machine name&gt;\nwalltime    = &lt;wall clock time per case&gt;\n</code></pre> <p>It is possible to use additional key-value pairs in this section as well. As key-value pairs are given to <code>Case.create()</code> (where <code>Case</code> is an object defined from <code>NorESM/cime/CIME/case/case.py</code>) available/unused key word arguments include <code>user_mods_dirs</code>, <code>pecount</code>, <code>compiler</code>, <code>mpilib</code>, <code>pesfile</code>, <code>gridfile</code>, <code>multi_driver</code>, <code>ninst</code>, <code>test</code>, <code>queue</code>, <code>output_root</code>, <code>input_dir</code>, <code>workflowid</code>, <code>non_local</code>, <code>extra_machines_dir</code> and <code>case_group</code>. Note: Arguments <code>run_unsupported=True</code>, <code>driver=\"mct\"</code>, <code>answer=\"r\"</code> are \"hard coded\" in <code>tinkertool.setup.case.build_base_case()</code> and is therefor not available. We referr to the CIME source code for proper usage of the available/unused key word arguments.</p> <p>env_run and env_build - This section holds key-value pairs used for setting enviromental variables for the model, i.e. what ones does when using <code>./xmlchange</code> in a case directory. Required keys are <code>RUN_TYPE</code>, <code>STOP_OPTION</code>, <code>STOP_N</code> and <code>RUN__STARTDATE</code>. In addition this implementation has explicit handling off <code>GET_REFCASE</code>, <code>RUN_REFCASE</code>, <code>RUN_REFDIR</code>, <code>RUN_REFDATE</code>, <code>REST_OPTION</code>, <code>REST_N</code> for env_run and <code>CALENDAR</code>for env_build. To change <code>CAM_CONFIG_OPTS</code> there are two options; 1. provide a full and valid version of <code>CAM_CONFIG_OPTS</code>, this will overwrite the default in full, or 2. provide <code>cam_onopts</code>, this will add the options to the default. A valid/recomended env_run and env_build section is then:</p> <pre><code>[env_run]\nRUN_TYPE        = &lt;type of run&gt;\nSTOP_OPTION     = &lt;measure of time to use for STOP_N&gt;\nSTOP_N          = &lt;count of the STOP_OPTION meassure to stop run at&gt;\nRUN_STARTDATE   = &lt;date to start calendar in run&gt;\n; recomended entries for non-startup runs\nGET_REFCASE     = &lt;Flag for automatically prestaging the refcase restart dataset&gt;\nRUN_REFCASE     = &lt;Reference case for hybrid or branch runs&gt;\nRUN_REFDIR      = &lt;Reference directory containing RUN_REFCASE data&gt;\nRUN_REFDATE     = &lt;Reference date for hybrid or branch runs (yyyy-mm-dd)&gt;\nREST_OPTION     = &lt;measure for frequency of model restart writes&gt;\nREST_N          = &lt;count of the REST_OPTION meassure&gt;\n; specially handled keys\nCAM_CONFIG_OPTS = &lt;replacement to existing CAM_CONFIG_OPTS&gt;\n; OR\ncam_onopts      = &lt;string to add to existing CAM_CONFIG_OPTS&gt;\n\n[env_build]\nCALENDAR  = GREGORIAN\n</code></pre> <p>It is possible to use additional key-value pairs in this section as well. As key-value pairs are given to <code>Case.set_value()</code> (where <code>Case</code> is an object defined from <code>NorESM/cime/CIME/case/case.py</code>) available/unused are available by running <code>./xmlquery --listall</code> in a case directory. To see information for a key run <code>./xmlquery &lt;key&gt; --full</code>. NOTE: Additional key-value pairs to those already discussed are attempted set using a loop over remaining pairs, a warning is raised if it is not successfull but program will not exit. This is done after the handling of the other keys.</p> <p>ppe_settings - This section holds key-value paris used for pointing to the parameter file previously discussed and ensuring correct case paths for PPE members. Required keys are <code>paramfile</code>, <code>pdim</code>, <code>baseroot</code>, <code>basecasename</code>, <code>basecase_id</code> and <code>assumed_esm_component</code>. A valid section is therefore:</p> <pre><code>paramfile             = &lt;absolute path to .nc parameter samples&gt;\npdim                  = &lt;ensamlbe number dimension name in paramfile&gt;\nbaseroot              = &lt;absolute path to where you want ppe cases&gt;\nbasecasename          = &lt;name of basecase&gt;\nbasecase_id           = &lt;number used id-ing the basecase, e.g. 000 if we include default or 001 if we exclude it&gt;\nassumed_esm_component = &lt;assumed component for variables in paramfile which dont have\n                         'component' attribute. Used to send variable to the correct user_nl file &gt;\n</code></pre> <p>Further key-value pairs is not implemented as of now.</p> <p>namelist_control - This section holds key-value pairs used for pointing to .ini files used to generate custom user_nl_ files. A valid section would be something like <pre><code>[namelist_control]\ncontrol_atm = &lt;path to control_atm.ini or None (example in input_file_templates/template_control_atm.ini)&gt;\ncontrol_cpl = &lt;path to control_cpl.ini or None (example in input_file_templates/template_control_cpl.ini)&gt;\ncontrol_cice = &lt;path to control_cice.ini or None (example in input_file_templates/template_control_cice.ini)&gt;\ncontrol_clm = &lt;path to control_clm.ini or None(example in input_file_templates/template_control_clm.ini)&gt;\ncontrol_docn = &lt;path to control_docn.ini or None(example in input_file_templates/template_control_docn.ini)\n</code></pre> <p>If a <code>control_&lt;component&gt;</code> key is <code>= None</code> the model default one is used, otherwise the <code>.ini</code> file is used to create a string replacing user_nl_ via the follow ini-file syntax, e.g.: <pre><code>[metadata_nl]\nmet_data_file = /cluster/shared/noresm/inputdata/noresm-only/inputForNudging/ERA_f09f09_32L_days/2014-01-01.nc\nmet_filenames_list = /cluster/shared/noresm/inputdata/noresm-only/inputForNudging/ERA_f09f09_32L_days/fileList2001-2015.txt\nmet_nudge_only_uvps = .true.\nmet_nudge_temp = .false.\nmet_rlx_time = 6\nmet_srf_land = .false.\n\n[cam_initfiles_nl]\nbnd_topo=/cluster/shared/noresm/inputdata/noresm-only/inputForNudging/ERA_f09f09_32L_days/ERA_bnd_topo_noresm2_20191023.nc\n\n[camexp]\nempty_htapes = .true.\nnhtfrq=0,-24\nmfilt=1,30\ncosp_passive=.true.\nuse_aerocom=.true.\nhistory_aerosol=.true.\navgflag_pertape = A\nfincl1 = AQRAIN\n         AQSNOW\n         AREI\n         ACTREI\n         ACTREL\n         ACTNI\n         ACTNL\n         AWNC\n         AWNI\n         AIRMASS\n         AIRMASSL\n         ABS870\n...\n</code></pre> <p>Each section correspond to namelist group. Valid namelist variables are described in <code>namelist_definition*.xml</code> files: * CAM - <code>NorESM/components/cam/bld/namelist_files/namelist_definition.xml</code> * ...</p> <p>NOTE: You do not need to add the name of the parameters you are pertermbing to these .ini files.</p>"},{"location":"installation/","title":"Installation","text":"<ol> <li>Setup virtual eviroment.</li> </ol> <pre><code>python3 -m venv tinkertool &amp;&amp; source tinkertool/bin/activate\n</code></pre> <p>Note that the package requires python &gt;=3.10,&lt;3.12 to be active in your enviroment.</p> <ol> <li>clone repository:</li> </ol> <pre><code>git clone https://github.com/Ovewh/NorESMTinkerTool.git &amp;&amp; cd NorESMTinkerTool\n</code></pre> <ol> <li>Install</li> </ol> <pre><code>pip install -e  ./\n</code></pre> <p>Or, to include optionals:</p> <pre><code>pip install -e  .[optional1, ..., optionalx]\n</code></pre> <p>Available optionals:</p> <ul> <li>sampling</li> </ul> <p>Note that the <code>-e</code> puts the package in editable mode, if it is not included changes to configuration files etc will not be available before you re install the package.</p>"},{"location":"usage/","title":"API Usage","text":"<p>This section describes how to use the NorESMTinkerTool package, within a python script using the internal API.</p>"},{"location":"usage/#contents","title":"\ud83d\udcda Contents","text":"<ul> <li>Prerequisites</li> <li>Generate parameter file for PPE</li> <li>Create PPE</li> </ul>"},{"location":"usage/#prerequisites","title":"\ud83d\udce3 Prerequisites","text":"<p>Before the package can be used, the path to the NorESM directory must be set, by specifying the <code>CESMROOT</code> enviromental variable, such that it can find the required CIME libraries.</p> <pre><code>export CESMROOT=/path/to/NorESM\n</code></pre> <p>The package then has the following use cases:</p> <ol> <li>Generate parameter file for PPE.</li> <li>Create PPE.</li> </ol> <p>Package usage is detailed further in the following subsections.</p>"},{"location":"usage/#generate-parameter-file-for-ppe","title":"Generate parameter file for PPE","text":"<p>To generate the parameter file for the PPE we use <code>generate-paramfile</code> program.</p> <p>Requirements:</p> <ul> <li>scipy and xarray should be installed, ensure optional 'sampling' is included in installation command <code>pip install -e .[sampling]</code>.</li> <li>Update input files:</li> <li>Update parameter ranges by either adding/editing entries in <code>default_config/default_param_ranges.ini</code> or by feeding an updated custom path to --param-ranges-file (see more information bellow).</li> <li><code>default_config/chem_mech_default.in</code> should be renewed if you are perterbing values from <code>NorESM/components/cam/src/chemistry/pp_trop_mam_oslo/</code>.</li> </ul> <p>To generate the parameter file for the PPE we use Latin Hypercube sampling  to most efficiently span the whole parameter space.  The product of the script is a .nc file that will have one dimension,  'nmb_sim', which contains the number of ensemble members. Each parameter is  stored as a variable in the dataset and is scaled according to its  specified range and sampling method. The ranges as described in the <code>default_config/default_param_ranges.ini</code> file are used to distribute parameter values between its minimum and maximum bounds.</p> <p>A importable function if you prefer running from another script. The main function only takes a CreatePPEConfig object as input. Basic example</p> <pre><code>from pathlib import Path\nfrom tinkertool.scripts.crate_ppe.config import CreatePPEConfig\nfrom tinkertool.scripts.create_ppe.create_ppe import create_ppe\n\n# describe the expected input to PPEConfig\nCreatePPEConfig.describe()\n\nppe_config = CreatePPEConfig(\n  simulation_setup_path = Path(&lt;simulation_setup.ini&gt;).resolve(),\n  build_base_only       = False,\n  build_only            = False,\n  keepexe               = False,\n  overwrite             = False,\n  verbose               = 0,\n  log_file              = Path(&lt;wanted_logfile.out&gt;).resolve(),\n  log_mode              = 'w'\n)\n\ncreate_ppe(ppe_config)\n</code></pre> <p>alternatively if you only want to either a) build or b) submit cases use</p> <pre><code>from pathlib import Path\nfrom tinkertool.scripts.crate_ppe.config import BuildPPEConfig, SubmitPPEConfig\nfrom tinkertool.scripts.create_ppe.create_ppe import build_ppe, submit_ppe\n\n# a) Build only\nBuildPPEConfig.help()\nbuildppe_config = BuildPPEConfig(\n  simulation_setup_path = Path(&lt;simulation_setup.ini&gt;).resolve(),\n  build_base_only       = False,\n  keepexe               = False,\n  overwrite             = False,\n  verbose               = 0,\n  log_file              = Path(&lt;wanted_logfile.out&gt;).resolve(),\n  log_mode              = 'w'\n)\nbuild_ppe(buildppe_config)\n\n# b) Sumbit only\nSubmitPPEConfig.help()\nsubmitppe_config = SubmitPPEConfig(\n  cases                 = list(Path(&lt;case1&gt;).resolve(), ..., Path(&lt;caseX&gt;).resolve())\n  verbose               = 0,\n  log_file              = Path(&lt;wanted_logfile.out&gt;).resolve(),\n  log_mode              = 'w'\n)\n\nsubmit_ppe(submitppe_config)\n</code></pre>"}]}